diff -ru js-1.8.5.orig/js/src/jsapi.cpp js-1.8.5/js/src/jsapi.cpp
--- js-1.8.5.orig/js/src/jsapi.cpp	2011-03-31 20:08:36.000000000 +0100
+++ js-1.8.5/js/src/jsapi.cpp	2018-05-15 18:14:28.744056421 +0100
@@ -3985,7 +3985,7 @@
     AutoIdVector props(cx);
     JSIdArray *ida;
     if (!GetPropertyNames(cx, obj, JSITER_OWNONLY, &props) || !VectorToIdArray(cx, props, &ida))
-        return false;
+        return NULL;
     for (size_t n = 0; n < size_t(ida->length); ++n)
         JS_ASSERT(js_CheckForStringIndex(ida->vector[n]) == ida->vector[n]);
     return ida;
diff -ru js-1.8.5.orig/js/src/jsfun.cpp js-1.8.5/js/src/jsfun.cpp
--- js-1.8.5.orig/js/src/jsfun.cpp	2011-03-31 20:08:36.000000000 +0100
+++ js-1.8.5/js/src/jsfun.cpp	2018-05-15 18:19:39.891957601 +0100
@@ -2051,7 +2051,7 @@
 
     JSString *str = JS_DecompileFunction(cx, fun, indent);
     if (!str)
-        return false;
+        return NULL;
 
     if (!indent)
         cx->compartment->toSourceCache.put(fun, str);
@@ -2657,7 +2657,7 @@
     const Shape *shape = funobj->nativeLookup(id);
     if (!shape) {
         if (!ResolveInterpretedFunctionPrototype(cx, funobj))
-            return false;
+            return NULL;
         shape = funobj->nativeLookup(id);
     }
     JS_ASSERT(!shape->configurable());
diff -ru js-1.8.5.orig/js/src/jsiter.cpp js-1.8.5/js/src/jsiter.cpp
--- js-1.8.5.orig/js/src/jsiter.cpp	2011-03-31 20:08:36.000000000 +0100
+++ js-1.8.5/js/src/jsiter.cpp	2018-05-15 18:20:12.391948248 +0100
@@ -425,7 +425,7 @@
          */
         JSObject *obj = js_NewGCObject(cx, FINALIZE_OBJECT0);
         if (!obj)
-            return false;
+            return NULL;
         obj->init(cx, &js_IteratorClass, NULL, NULL, NULL, false);
         obj->setMap(cx->compartment->emptyEnumeratorShape);
         return obj;
diff -ru js-1.8.5.orig/js/src/jsparse.cpp js-1.8.5/js/src/jsparse.cpp
--- js-1.8.5.orig/js/src/jsparse.cpp	2011-03-31 20:08:36.000000000 +0100
+++ js-1.8.5/js/src/jsparse.cpp	2018-05-15 18:20:36.019941537 +0100
@@ -3352,7 +3352,7 @@
     if (!outertc->inFunction() && bodyLevel && funAtom && !lambda && outertc->compiling()) {
         JS_ASSERT(pn->pn_cookie.isFree());
         if (!DefineGlobal(pn, outertc->asCodeGenerator(), funAtom))
-            return false;
+            return NULL;
     }
 
     pn->pn_blockid = outertc->blockid();
diff -ru js-1.8.5.orig/js/src/jsstr.cpp js-1.8.5/js/src/jsstr.cpp
--- js-1.8.5.orig/js/src/jsstr.cpp	2011-03-31 20:08:36.000000000 +0100
+++ js-1.8.5/js/src/jsstr.cpp	2018-05-15 18:22:00.467918114 +0100
@@ -1734,7 +1734,7 @@
         if (flat) {
             patstr = flattenPattern(cx, fm.patstr);
             if (!patstr)
-                return false;
+                return NULL;
         } else {
             patstr = fm.patstr;
         }
@@ -3400,7 +3400,7 @@
                                  UndefinedValue(), NULL, NULL,
                                  JSPROP_READONLY | JSPROP_PERMANENT | JSPROP_SHARED, 0, 0,
                                  NULL)) {
-        return JS_FALSE;
+        return NULL;
     }
 
     return proto;
diff -ru js-1.8.5.orig/js/src/jstypedarray.cpp js-1.8.5/js/src/jstypedarray.cpp
--- js-1.8.5.orig/js/src/jstypedarray.cpp	2011-03-31 20:08:36.000000000 +0100
+++ js-1.8.5/js/src/jstypedarray.cpp	2018-05-15 18:23:01.031901801 +0100
@@ -1334,7 +1334,7 @@
         if (size != 0 && count >= INT32_MAX / size) {
             JS_ReportErrorNumber(cx, js_GetErrorMessage, NULL,
                                  JSMSG_NEED_DIET, "size and count");
-            return false;
+            return NULL;
         }
 
         int32 bytelen = size * count;
@@ -1668,7 +1668,7 @@
 
       default:
         JS_NOT_REACHED("shouldn't have gotten here");
-        return false;
+        return NULL;
     }
 }
 
diff -ru js-1.8.5.orig/js/src/jsxml.cpp js-1.8.5/js/src/jsxml.cpp
--- js-1.8.5.orig/js/src/jsxml.cpp	2011-03-31 20:08:36.000000000 +0100
+++ js-1.8.5/js/src/jsxml.cpp	2018-05-15 18:23:34.095893048 +0100
@@ -282,7 +282,7 @@
 
     obj = NewBuiltinClassInstanceXML(cx, &js_NamespaceClass);
     if (!obj)
-        return JS_FALSE;
+        return NULL;
     JS_ASSERT(JSVAL_IS_VOID(obj->getNamePrefixVal()));
     JS_ASSERT(JSVAL_IS_VOID(obj->getNameURIVal()));
     JS_ASSERT(JSVAL_IS_VOID(obj->getNamespaceDeclared()));
@@ -431,7 +431,7 @@
         size_t length = str->length();
         jschar *chars = (jschar *) cx->malloc((length + 2) * sizeof(jschar));
         if (!chars)
-            return JS_FALSE;
+            return NULL;
         *chars = '@';
         const jschar *strChars = str->getChars(cx);
         if (!strChars) {
diff -ru js-1.8.5.orig/js/src/methodjit/InvokeHelpers.cpp js-1.8.5/js/src/methodjit/InvokeHelpers.cpp
--- js-1.8.5.orig/js/src/methodjit/InvokeHelpers.cpp	2011-03-31 20:08:36.000000000 +0100
+++ js-1.8.5/js/src/methodjit/InvokeHelpers.cpp	2018-05-15 19:08:04.989603598 +0100
@@ -728,7 +728,7 @@
 {
     JSStackFrame *fp = cx->fp();
     if (fp->hasImacropc())
-        return false;
+        return NULL;
 
     JSScript *script = fp->script();
     return script->maybeNativeCodeForPC(fp->isConstructing(), cx->regs->pc);
diff -ru js-1.8.5.orig/js/src/nanojit/NativeX64.cpp js-1.8.5/js/src/nanojit/NativeX64.cpp
--- js-1.8.5.orig/js/src/nanojit/NativeX64.cpp	2011-03-31 20:08:36.000000000 +0100
+++ js-1.8.5/js/src/nanojit/NativeX64.cpp	2018-05-15 19:04:27.673653605 +0100
@@ -1899,7 +1899,7 @@
          }
     }
 
-    static const AVMPLUS_ALIGN16(int64_t) negateMask[] = {0x8000000000000000LL,0};
+    static const AVMPLUS_ALIGN16(uint64_t) negateMask[] = {0x8000000000000000LL,0};
 
     void Assembler::asm_fneg(LIns *ins) {
         Register rr, ra;
